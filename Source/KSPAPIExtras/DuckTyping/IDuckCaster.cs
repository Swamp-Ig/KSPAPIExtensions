// IDuckCaster.cs
//
// Copyright (C) 2007 David Meyer
// All Rights Reserved
//
// Website: http://www.deftflux.net/
// E-mail: deftflux@deftflux.net
//
// This source is licensed to the public via Artistic License 2.0 which should be found in a file
// named license.txt included with the package.  It is also available online at:
// http://www.perlfoundation.org/artistic_license_2_0


using System;
using System.Collections.Generic;
using System.Text;

namespace DeftTech.DuckTyping
{
    /// <summary>
    /// Interface for strategies of duck casting.
    /// </summary>
    internal interface IDuckCaster
    {
        /// <summary>
        /// Determines whether this duck caster should be used to perform the given cast.
        /// </summary>
        /// <param name="toType">Type to be casted to.</param>
        /// <param name="fromType">Type of object to be casted.</param>
        /// <returns>If this duck caster should be used to perform the given cast, true; otherwise, false.</returns>
        bool ShouldCast(Type toType, Type fromType);

        /// <summary>
        /// Determines whether this duck caster needs to perform an uncasting operation before the 
        /// duck is casted to another type.
        /// </summary>
        /// <remarks>
        /// If the given object is a proxy generated by this strategy, true should be returned.  This
        /// prevents proxies to proxies being generated.  If true is returned here, DuckTyping will 
        /// respond by calling Uncast.
        /// </remarks>
        /// <param name="duck">The object to be casted.</param>
        /// <returns>If this duck caster needs to perform an uncasting operation before the duck is casted to another type, true; otherwise, false.</returns>
        bool ShouldUncast(object duck);

        /// <summary>
        /// Determines whether a given cast is valid.
        /// </summary>
        /// <param name="toType">Type to be casted to.</param>
        /// <param name="fromType">The object to be casted.</param>
        /// <returns>If the given cast is valid, true; otherwise, false.</returns>
        bool CanCast(Type toType, Type fromType);

        /// <summary>
        /// Determines whether a given uncast operation might be possible without knowing the actual casted object.
        /// </summary>
        /// <param name="originalType">Original type to be uncasted to.</param>
        /// <param name="castedType">The type of the casted object.</param>
        /// <returns>If the given uncast operation might be possible, true; otherwise, false.</returns>
        bool CouldUncast(Type originalType, Type castedType);

        /// <summary>
        /// Prepares for a given cast by performing all necessary overhead.
        /// </summary>
        /// <param name="toType">Type to be casted to.</param>
        /// <param name="fromType">The object to be casted.</param>
        void PrepareCast(Type toType, Type fromType);

        /// <summary>
        /// Performs a given cast.
        /// </summary>
        /// <param name="toType">Type to be casted to.</param>
        /// <param name="duck">The object to cast.</param>
        /// <returns>The casted object.</returns>
        object Cast(Type toType, object duck);

        /// <summary>
        /// Uncasts a given object.
        /// </summary>
        /// <remarks>
        /// This method should only be called if ShouldUncast returns true.
        /// </remarks>
        /// <param name="duck">The object to uncast.</param>
        /// <returns>The uncasted object.</returns>
        object Uncast(object duck);
    }
}
